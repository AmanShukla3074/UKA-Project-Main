Certainly! Let me break down the provided code for you:

### 1. Models (`models.py`):

#### Product Models:
```python
class Product_M(models.Model):
    P_ID = models.AutoField(primary_key=True)
    P_Name = models.CharField(max_length=90)
    P_Desc = models.TextField(null=True, blank=True)
    P_Price = models.DecimalField(max_digits=12, decimal_places=2)
    # ... (other fields)
```

- Represents a product with a unique identifier (`P_ID`), name (`P_Name`), description (`P_Desc`), and price (`P_Price`).
- You can add more fields as needed for your specific product details.

#### Product Size Model:
```python
class Product_Size_M(models.Model):
    Size_ID = models.AutoField(primary_key=True)
    Size_Name = models.CharField(max_length=8)
    # ... (other fields)
```

- Represents different sizes for products.
- Each size has a unique identifier (`Size_ID`) and a name (`Size_Name`).

#### Cart Models:
```python
class Cart(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0)
```

- Represents a shopping cart associated with a user.
- `user`: One-to-One relationship with the Django User model.
- `total_price`: Stores the total price of items in the cart.

#### CartItem Model:
```python
class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='cart_items')
    product = models.ForeignKey(Product_M, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    subtotal = models.DecimalField(max_digits=10, decimal_places=2)
    size = models.ForeignKey(Product_Size_M, on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return f"{self.quantity} x {self.product.P_Name} ({self.size.Size_Name if self.size else 'No Size'}) in Cart"
```

- Represents an item in the shopping cart.
- `cart`: Foreign key relationship with the `Cart` model.
- `product`: Foreign key relationship with the `Product_M` model.
- `quantity`: Represents the quantity of the product in the cart.
- `subtotal`: Represents the subtotal cost of the items in the cart.
- `size`: Optional foreign key relationship with the `Product_Size_M` model, representing the size of the product in the cart.

### 2. Serializers (`serializers.py`):

#### SizeSerializer:
```python
class SizeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product_Size_M
        fields = ['Size_Name']
```

- Serializer for the `Product_Size_M` model, including the `Size_Name` field.

#### CartItemSerializer:
```python
class CartItemSerializer(serializers.ModelSerializer):
    size = SizeSerializer()

    class Meta:
        model = CartItem
        fields = ['product', 'quantity', 'subtotal', 'size']
```

- Serializer for the `CartItem` model, including the `product`, `quantity`, `subtotal`, and `size` fields.
- Embeds the `SizeSerializer` for the `size` field.

#### CartSerializer:
```python
class CartSerializer(serializers.ModelSerializer):
    cart_items = CartItemSerializer(many=True, read_only=True)

    class Meta:
        model = Cart
        fields = ['user', 'total_price', 'cart_items']
```

- Serializer for the `Cart` model, including the `user`, `total_price`, and `cart_items` fields.
- Embeds the `CartItemSerializer` for the `cart_items` field.

### 3. Views (`views.py`):

#### CartDetailView:
```python
class CartDetailView(APIView):
    def get(self, request, *args, **kwargs):
        # Fetch the cart and its items for the current user
        cart = Cart.objects.get(user=self.request.user)
        cart_items = CartItem.objects.filter(cart=cart)
        serialized_cart_items = CartItemSerializer(cart_items, many=True).data

        # Include size information for each product in the cart
        for cart_item_data in serialized_cart_items:
            product_id = cart_item_data['product']
            cart_item_data['size'] = Product_Size_M.objects.get(Product_ID=product_id).Size_Name

        return Response({'cart_items': serialized_cart_items, 'total_price': cart.total_price})

    def post(self, request, *args, **kwargs):
        # Add a new item to the cart
        serializer = CartItemSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        cart = Cart.objects.get(user=self.request.user)
        product = serializer.validated_data['product']
        quantity = serializer.validated_data['quantity']
        size = serializer.validated_data.get('size')  # Optional size selection
        subtotal = product.P_Price * quantity

        cart_item = CartItem.objects.create(cart=cart, product=product, quantity=quantity, size=size, subtotal=subtotal)

        # Update total price in the cart
        cart.total_price += subtotal
        cart.save()

        response

_data = {
            'message': 'Item added to the cart successfully',
            'cart_item': CartItemSerializer(cart_item).data,
        }

        return Response(response_data, status=status.HTTP_201_CREATED)

    def put(self, request, *args, **kwargs):
        # Update quantity or other details of a cart item
        cart_item = CartItem.objects.get(pk=request.data.get('cart_item_id'))
        serializer = CartItemSerializer(cart_item, data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()

        # Update total price in the cart
        cart = cart_item.cart
        cart.total_price += cart_item.subtotal - serializer.initial_data['subtotal']
        cart.save()

        return Response({'message': 'Cart item updated successfully'})

    def delete(self, request, *args, **kwargs):
        # Delete a cart item
        cart_item = CartItem.objects.get(pk=request.data.get('cart_item_id'))

        # Update total price in the cart before deleting the cart item
        cart = cart_item.cart
        cart.total_price -= cart_item.subtotal
        cart.save()

        cart_item.delete()

        return Response({'message': 'Cart item deleted successfully'})
```

- `GET`: Fetches the current user's cart and its items with size information.
- `POST`: Adds a new item to the cart and updates the total price.
- `PUT`: Updates quantity or other details of a cart item and adjusts the total price.
- `DELETE`: Deletes a cart item and adjusts the total price.

### 4. URLs (`urls.py`):

```python
# urls.py
from django.urls import path
from .views import CartDetailView

urlpatterns = [
    path('cart/', CartDetailView.as_view(), name='cart-detail'),
]
```

- Defines a URL endpoint (`/cart/`) that maps to the `CartDetailView` view.

This code provides a complete implementation of a shopping cart system, allowing users to view, add, update, and delete items in their cart. It also includes the size information for each product in the cart. Adjustments can be made based on your specific project requirements and business logic.










Que : 
i have 2 question first if user select size 2xl and then added to cart so how will cart will get this 2xl value and  second que how will put and delete method like give json input for this put and delete method

Certainly! Let me address both of your questions:

### 1. Size Selection in Cart:

When a user selects a size (e.g., "2XL") for a product and adds it to the cart, you need to include the selected size information in the request data. This information will then be processed in the `CartItemAddView` (or equivalent) to create a new `CartItem` instance with the specified size.

Here's an example of how the JSON data might look for adding an item to the cart with the selected size:

```json
{
  "product": 1,         // Product ID
  "quantity": 2,        // Quantity
  "size": 3             // Size ID for 2XL (assuming size IDs are used)
}
```

In this example, you would replace `1` with the actual ID of the product, and `3` with the actual ID of the size corresponding to "2XL."

### 2. PUT and DELETE Methods:

For the `PUT` and `DELETE` methods, you can pass the necessary information in the request data. Here are examples of how the JSON data might look for these methods:

#### For PUT (Update Cart Item):

```json
{
  "cart_item_id": 1,    // Cart Item ID to be updated
  "quantity": 3         // New quantity value
}
```

In this example, you would replace `1` with the actual ID of the cart item you want to update, and `3` with the new quantity value.

#### For DELETE (Delete Cart Item):

```json
{
  "cart_item_id": 2     // Cart Item ID to be deleted
}
```

In this example, you would replace `2` with the actual ID of the cart item you want to delete.

These JSON structures are just examples, and you should adapt them to match your actual API design and requirements. The key is to include the necessary information (e.g., `cart_item_id`, `quantity`, etc.) in the request data for the server to process the request correctly.